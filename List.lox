class Node {

    init(v) {
        this.value = v;
        this.next = nil;
    }

    hasNext() {
        return this.next != nil;
    }

}

class List {

    init() {
        this.head = Node(nil);
        this.lenght = 0;
    }

    get(n) {
        var node = this.head;
        var i = 0;
        while(node.hasNext() and i<n) {
            node = node.next;
            i = i + 1;
        }
        if ((i != n) or (node.value == nil)) return nil;
        return node;
    }

    set(v,n) {
        var node = this.head;
        var i = 0;
        while(node.hasNext() and i<n) {
            node = node.next;
            i = i + 1;
        }
        if (i == n) {
            node.value = v;
        }
    }

    add(v) {
        var node = this.head;
        while(node.hasNext()) {
            node = node.next;
        }
        node.next = Node(v);
        this.lenght = this.lenght + 1;
    }

    printList() {
        var node = this.head.next;
        while(node != nil) {
            print node.value;
            node = node.next;
        }
    }

}

fun map(list, function) {
    var newList = List();
    for(var i=1;i<list.lenght+1;i=i+1) {
        var val = list.get(i).value;
        var newVal = function(val);
        newList.add(newVal);
    }
    return newList;
}

var list = List();
list.add(1);
list.add(2);
list.printList();
map(list, fun(x) {x = x+1; return x;}).printList();
list.set(3,1);
list.printList();